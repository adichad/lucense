package org.apache.lucene.search;

/**
 * Copyright 2004 The Apache Software Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.io.IOException;
import java.util.Map;
import java.util.Set;

/**
 * The Scorer for CustomDisjunctionMaxQuery. The union of all documents
 * generated by the the subquery scorers is generated in document number order.
 * The score for each document is the maximum of the scores computed by the
 * subquery scorers that generate that document, plus tieBreakerMultiplier times
 * the sum of the scores for the other subqueries that generate the document.
 */
class CustomDisjunctionMaxScorer extends CustomScorer {

  /*
   * The scorers for subqueries that have remaining docs, kept as a min heap by
   * number of next doc.
   */
  private final Scorer[] subScorers;

  private int numScorers;

  /*
   * Multiplier applied to non-maximum-scoring subqueries for a document as they
   * are summed into the result.
   */
  private int doc = -1;

  private float boostValue;

  /**
   * Creates a new instance of CustomDisjunctionMaxScorer
   * 
   * @param tieBreakerMultiplier
   *          Multiplier applied to non-maximum-scoring subqueries for a
   *          document as they are summed into the result.
   * @param similarity
   *          -- not used since our definition involves neither coord nor terms
   *          directly
   * @param subScorers
   *          The sub scorers this Scorer should iterate on
   * @param numScorers
   *          The actual number of scorers to iterate on. Note that the array's
   *          length may be larger than the actual number of scorers.
   */
  public CustomDisjunctionMaxScorer(Weight weight, Similarity similarity, Scorer[] subScorers, int numScorers)
      throws IOException {
    super(similarity);

    // The passed subScorers array includes only scorers which have documents
    // (CustomDisjunctionMaxQuery takes care of that), and their nextDoc() was
    // already
    // called.
    this.subScorers = subScorers;
    this.numScorers = numScorers;
    this.boostValue = weight.getQuery().getBoost();

    heapify();
  }

  /**
   * Generate the next document matching our associated
   * CustomDisjunctionMaxQuery.
   * 
   * @return true iff there is a next document
   * @deprecated use {@link #nextDoc()} instead.
   */
  @Deprecated
  public boolean next() throws IOException {
    return nextDoc() != NO_MORE_DOCS;
  }

  @Override
  public int nextDoc() throws IOException {
    if (this.numScorers == 0)
      return this.doc = NO_MORE_DOCS;
    while (this.subScorers[0].docID() == this.doc) {
      if (this.subScorers[0].nextDoc() != NO_MORE_DOCS) {
        heapAdjust(0);
      } else {
        heapRemoveRoot();
        if (this.numScorers == 0) {
          return this.doc = NO_MORE_DOCS;
        }
      }
    }

    return this.doc = this.subScorers[0].docID();
  }

  @Override
  public int docID() {
    return this.doc;
  }

  /**
   * Determine the current document score. Initially invalid, until
   * {@link #next()} is called the first time.
   * 
   * @return the score of the current generated document
   */
  @Override
  public float score() throws IOException {
    int doc = this.subScorers[0].docID();
    float[] sum = { this.subScorers[0].score() };
    int size = this.numScorers;
    scoreAll(1, size, doc, sum);
    scoreAll(2, size, doc, sum);
    return sum[0] + this.boostValue;
  }

  // Recursively iterate all subScorers that generated last doc computing sum
  // and max
  private void scoreAll(int root, int size, int doc, float[] sum) throws IOException {
    if ((root < size) && (this.subScorers[root].docID() == doc)) {
      float sub = this.subScorers[root].score();
      sum[0] += sub;
      scoreAll((root << 1) + 1, size, doc, sum);
      scoreAll((root << 1) + 2, size, doc, sum);
    }
  }

  /**
   * Advance to the first document beyond the current whose number is greater
   * than or equal to target.
   * 
   * @param target
   *          the minimum number of the next desired document
   * @return true iff there is a document to be generated whose number is at
   *         least target
   * @deprecated use {@link #advance(int)} instead.
   */
  @Deprecated
  public boolean skipTo(int target) throws IOException {
    return advance(target) != NO_MORE_DOCS;
  }

  @Override
  public int advance(int target) throws IOException {
    if (this.numScorers == 0)
      return this.doc = NO_MORE_DOCS;
    while (this.subScorers[0].docID() < target) {
      if (this.subScorers[0].advance(target) != NO_MORE_DOCS) {
        heapAdjust(0);
      } else {
        heapRemoveRoot();
        if (this.numScorers == 0) {
          return this.doc = NO_MORE_DOCS;
        }
      }
    }
    return this.doc = this.subScorers[0].docID();
  }

  /**
   * Explain a score that we computed. UNSUPPORTED -- see explanation capability
   * in CustomDisjunctionMaxQuery.
   * 
   * @param doc
   *          the number of a document we scored
   * @return the Explanation for our score
   */
  public Explanation explain(int doc) throws IOException {
    throw new UnsupportedOperationException();
  }

  // Organize subScorers into a min heap with scorers generating the earliest
  // document on top.
  private void heapify() {
    for (int i = (this.numScorers >> 1) - 1; i >= 0; i--) {
      heapAdjust(i);
    }
  }

  /*
   * The subtree of subScorers at root is a min heap except possibly for its
   * root element. Bubble the root down as required to make the subtree a heap.
   */
  private void heapAdjust(int root) {
    Scorer scorer = this.subScorers[root];
    int doc = scorer.docID();
    int i = root;
    while (i <= (this.numScorers >> 1) - 1) {
      int lchild = (i << 1) + 1;
      Scorer lscorer = this.subScorers[lchild];
      int ldoc = lscorer.docID();
      int rdoc = Integer.MAX_VALUE, rchild = (i << 1) + 2;
      Scorer rscorer = null;
      if (rchild < this.numScorers) {
        rscorer = this.subScorers[rchild];
        rdoc = rscorer.docID();
      }
      if (ldoc < doc) {
        if (rdoc < ldoc) {
          this.subScorers[i] = rscorer;
          this.subScorers[rchild] = scorer;
          i = rchild;
        } else {
          this.subScorers[i] = lscorer;
          this.subScorers[lchild] = scorer;
          i = lchild;
        }
      } else if (rdoc < doc) {
        this.subScorers[i] = rscorer;
        this.subScorers[rchild] = scorer;
        i = rchild;
      } else {
        return;
      }
    }
  }

  // Remove the root Scorer from subScorers and re-establish it as a heap
  private void heapRemoveRoot() {
    if (this.numScorers == 1) {
      this.subScorers[0] = null;
      this.numScorers = 0;
    } else {
      this.subScorers[0] = this.subScorers[this.numScorers - 1];
      this.subScorers[this.numScorers - 1] = null;
      --this.numScorers;
      heapAdjust(0);
    }
  }

  @Override
  public void matchedTermPositions(Map<String, MatchTermPositions> mtp,
      Set<String> scoreFields) throws IOException {
    for(Scorer scorer: this.subScorers)
      if(scorer instanceof CustomScorer)
        ((CustomScorer)scorer).matchedTermPositions(mtp, scoreFields);
    
  }

}
