/* Generated By:JavaCC: Do not edit this line. ExpressionParser.java */
package com.adichad.lucense.expression.parse;
import java.util.*;
import com.adichad.lucense.expression.node.*;
import com.adichad.lucense.expression.node.ints.*;
import com.adichad.lucense.expression.node.booleans.*;
import com.adichad.lucense.expression.node.strings.*;
import com.adichad.lucense.expression.node.floats.*;
import com.adichad.lucense.expression.node.doubles.*;
import com.adichad.lucense.expression.*;
import org.mozilla.javascript.*;

public class ExpressionParser implements ExpressionParserConstants {
  private Scriptable scope;

  Set < String > intVars = new HashSet < String > ();
  Set < String > floatVars = new HashSet < String > ();
  Set < String > doubleVars = new HashSet < String > ();
  Set < String > booleanVars = new HashSet < String > ();
  Set < String > stringVars = new HashSet < String > ();

  private Stack < ExpressionNode > operands = new Stack < ExpressionNode > ();

  private Stack < Operator > operators = new Stack < Operator > ();

  private boolean hasAggregates = false;

  private List < AggregatorExpressionNode > aggregateNodes = new ArrayList < AggregatorExpressionNode > ();

  private enum Operator
  {
    INTPLUS, INTSUB, INTMUL, INTDIV, INTSTEPINT, INTMOD, INTBITAND, INTBITOR, INTBITNOT, INTBITXOR, INTSIGNEDSHIFTLEFT, INTSIGNEDSHIFTRIGHT, INTUNSIGNEDSHIFTRIGHT, INTIF, INTMAX, INTMIN, INTJS, INTLATEJS, INTSTRLEN, INTAGGSUM, INTAGGPROD, INTAGGMIN, INTAGGMAX, INTAGGBITAND, INTAGGBITOR,
    FLOATPLUS, FLOATSUB, FLOATMUL, FLOATDIV, FLOATIF, FLOATMAX, FLOATMIN, FLOATJS, FLOATLATEJS, FLOATAGGSUM, FLOATAGGPROD, FLOATAGGMIN, FLOATAGGMAX,
    BOOLAND, BOOLOR, BOOLNOT, BOOLINTEQL, BOOLINTNEQ, BOOLINTGEQ, BOOLINTLEQ, BOOLINTGRE, BOOLINTLES, BOOLSTRINGEQL, BOOLSTRINGNEQ, BOOLIF, BOOLJS, BOOLLATEJS,
    STRINGCONCAT, STRINGCONCATWS, STRINGAGGCONCAT, STRINGAGGCONCATWS, STRINGAGGCONCATWSEXT, STRINGAGGCONCATFSPS, STRINGJS, STRINGLATEJS, STRINGIF, RB, LB;

    public void pushNode(Stack < ExpressionNode > operands)
    {
      switch (this)
      {
        case INTPLUS :
        {
          List < IntExpressionNode > params = new ArrayList < IntExpressionNode > (2);
          params.add((IntExpressionNode) operands.pop());
          params.add((IntExpressionNode) operands.pop());
          operands.push(new IntPlus(params));
          break;
        }
        case INTSUB :
        {
          List < IntExpressionNode > negative = new ArrayList < IntExpressionNode > (1);
          negative.add((IntExpressionNode) operands.pop());
          IntExpressionNode positive = (IntExpressionNode) operands.pop();
          operands.push(new IntMinus(positive, negative));
          break;
        }
        case INTMUL :
        {
          List < IntExpressionNode > params = new ArrayList < IntExpressionNode > (2);
          params.add((IntExpressionNode) operands.pop());
          params.add((IntExpressionNode) operands.pop());
          operands.push(new IntProduct(params));
          break;
        }
        case INTDIV :
        {
          IntExpressionNode divisor = (IntExpressionNode) operands.pop();
          IntExpressionNode dividend = (IntExpressionNode) operands.pop();
          operands.push(new IntDivide(dividend, divisor));
          break;
        }
        case INTMOD :
        {
          IntExpressionNode divisor = (IntExpressionNode) operands.pop();
          IntExpressionNode dividend = (IntExpressionNode) operands.pop();
          operands.push(new IntMod(dividend, divisor));
          break;
        }
        case INTBITAND :
        {
          IntExpressionNode divisor = (IntExpressionNode) operands.pop();
          IntExpressionNode dividend = (IntExpressionNode) operands.pop();
          operands.push(new IntBitwiseAnd(dividend, divisor));
          break;
        }
        case INTBITOR :
        {
          IntExpressionNode divisor = (IntExpressionNode) operands.pop();
          IntExpressionNode dividend = (IntExpressionNode) operands.pop();
          operands.push(new IntBitwiseOr(dividend, divisor));
          break;
        }
        case INTBITNOT :
        {
          IntExpressionNode divisor = (IntExpressionNode) operands.pop();
          operands.push(new IntBitwiseNot(divisor));
          break;
        }
        case INTBITXOR :
        {
          IntExpressionNode divisor = (IntExpressionNode) operands.pop();
          IntExpressionNode dividend = (IntExpressionNode) operands.pop();
          operands.push(new IntBitwiseXor(dividend, divisor));
          break;
        }
        case INTSIGNEDSHIFTLEFT :
        {
          IntExpressionNode shiftby = (IntExpressionNode) operands.pop();
          IntExpressionNode shifted = (IntExpressionNode) operands.pop();
          operands.push(new IntSignedShiftLeft(shifted, shiftby));
          break;
        }
        case INTSIGNEDSHIFTRIGHT :
        {
          IntExpressionNode shiftby = (IntExpressionNode) operands.pop();
          IntExpressionNode shifted = (IntExpressionNode) operands.pop();
          operands.push(new IntSignedShiftRight(shifted, shiftby));
          break;
        }
        case INTUNSIGNEDSHIFTRIGHT :
        {
          IntExpressionNode shiftby = (IntExpressionNode) operands.pop();
          IntExpressionNode shifted = (IntExpressionNode) operands.pop();
          operands.push(new IntUnsignedShiftRight(shifted, shiftby));
          break;
        }
        case FLOATPLUS :
        {
          List < FloatExpressionNode > params = new ArrayList < FloatExpressionNode > (2);
          params.add((FloatExpressionNode) operands.pop());
          params.add((FloatExpressionNode) operands.pop());
          operands.push(new FloatPlus(params));
          break;
        }
        case FLOATSUB :
        {
          List < FloatExpressionNode > negative = new ArrayList < FloatExpressionNode > (1);
          negative.add((FloatExpressionNode) operands.pop());
          FloatExpressionNode positive = (FloatExpressionNode) operands.pop();
          operands.push(new FloatMinus(positive, negative));
          break;
        }
        case FLOATMUL :
        {
          List < FloatExpressionNode > params = new ArrayList < FloatExpressionNode > (2);
          params.add((FloatExpressionNode) operands.pop());
          params.add((FloatExpressionNode) operands.pop());
          operands.push(new FloatProduct(params));
          break;
        }
        case FLOATDIV :
        {
          FloatExpressionNode divisor = (FloatExpressionNode) operands.pop();
          FloatExpressionNode dividend = (FloatExpressionNode) operands.pop();
          operands.push(new FloatDivide(dividend, divisor));
          break;
        }
        case BOOLAND :
        {
          BooleanExpressionNode second = (BooleanExpressionNode) operands.pop();
          List < BooleanExpressionNode > params = new ArrayList < BooleanExpressionNode > (2);
          params.add((BooleanExpressionNode) operands.pop());
          params.add(second);
          operands.push(new BooleanAnd(params));
          break;
        }
        case BOOLOR :
        {
          BooleanExpressionNode second = (BooleanExpressionNode) operands.pop();
          List < BooleanExpressionNode > params = new ArrayList < BooleanExpressionNode > (2);
          params.add((BooleanExpressionNode) operands.pop());
          params.add(second);
          operands.push(new BooleanOr(params));
          break;
        }
        case BOOLNOT :
        {
          BooleanExpressionNode param = (BooleanExpressionNode) operands.pop();
          operands.push(new BooleanNot(param));
          break;
        }
        case BOOLINTEQL :
        {
          IntExpressionNode second = (IntExpressionNode) operands.pop();
          IntExpressionNode first = (IntExpressionNode) operands.pop();
          operands.push(new BooleanEqualInt(first, second));
          break;
        }
        case BOOLINTNEQ :
        {
          IntExpressionNode second = (IntExpressionNode) operands.pop();
          IntExpressionNode first = (IntExpressionNode) operands.pop();
          operands.push(new BooleanNotEqualInt(first, second));
          break;
        }
        case BOOLINTGEQ :
        {
          IntExpressionNode second = (IntExpressionNode) operands.pop();
          IntExpressionNode first = (IntExpressionNode) operands.pop();
          operands.push(new BooleanGreaterEqualInt(first, second));
          break;
        }
        case BOOLINTLEQ :
        {
          IntExpressionNode second = (IntExpressionNode) operands.pop();
          IntExpressionNode first = (IntExpressionNode) operands.pop();
          operands.push(new BooleanLesserEqualInt(first, second));
          break;
        }
        case BOOLINTGRE :
        {
          IntExpressionNode second = (IntExpressionNode) operands.pop();
          IntExpressionNode first = (IntExpressionNode) operands.pop();
          operands.push(new BooleanGreaterInt(first, second));
          break;
        }
        case BOOLINTLES :
        {
          IntExpressionNode second = (IntExpressionNode) operands.pop();
          IntExpressionNode first = (IntExpressionNode) operands.pop();
          operands.push(new BooleanLesserInt(first, second));
          break;
        }
        case BOOLSTRINGEQL :
        {
          StringExpressionNode second = (StringExpressionNode) operands.pop();
          StringExpressionNode first = (StringExpressionNode) operands.pop();
          operands.push(new BooleanEqualString(first, second));
          break;
        }
        case BOOLSTRINGNEQ :
        {
          StringExpressionNode second = (StringExpressionNode) operands.pop();
          StringExpressionNode first = (StringExpressionNode) operands.pop();
          operands.push(new BooleanNotEqualString(first, second));
          break;
        }
        default : break;
      }
    }

    public void pushNode(Stack < ExpressionNode > operands, Scriptable scope, Map < String, IntExpressionNode > intvars, Map < String, FloatExpressionNode > floatvars, Map < String, DoubleExpressionNode > doublevars, Map < String, BooleanExpressionNode > booleanvars, Map < String, StringExpressionNode > stringvars, List < AggregatorExpressionNode > aggregateNodes)
    {
      StringLiteral first = (StringLiteral) operands.pop();
      switch (this)
      {
        case INTJS :
        {
          IntJSExpression expr = new IntJSExpression(first, scope, intvars, floatvars, doublevars, booleanvars, stringvars);
          operands.push(expr);
          break;
        }
        case FLOATJS :
        {
          FloatJSExpression expr = new FloatJSExpression(first, scope, intvars, floatvars, doublevars, booleanvars, stringvars);
          operands.push(expr);
          break;
        }
        case BOOLJS :
        {
          BooleanJSExpression expr = new BooleanJSExpression(first, scope, intvars, floatvars, doublevars, booleanvars, stringvars);
          operands.push(expr);
          break;
        }
        case STRINGJS :
        {
          StringJSExpression expr = new StringJSExpression(first, scope, intvars, floatvars, doublevars, booleanvars, stringvars);
          operands.push(expr);
          break;
        }
        case INTLATEJS :
        {
          IntJSExpressionLate expr = new IntJSExpressionLate(first, scope, intvars, floatvars, doublevars, booleanvars, stringvars);
          operands.push(expr);
          aggregateNodes.add(expr);
          break;
        }
        case FLOATLATEJS :
        {
          FloatJSExpressionLate expr = new FloatJSExpressionLate(first, scope, intvars, floatvars, doublevars, booleanvars, stringvars);
          operands.push(expr);
          aggregateNodes.add(expr);
          break;
        }
        case BOOLLATEJS :
        {
          BooleanJSExpressionLate expr = new BooleanJSExpressionLate(first, scope, intvars, floatvars, doublevars, booleanvars, stringvars);
          operands.push(expr);
          aggregateNodes.add(expr);
          break;
        }
        case STRINGLATEJS :
        {
          StringJSExpressionLate expr = new StringJSExpressionLate(first, scope, intvars, floatvars, doublevars, booleanvars, stringvars);
          operands.push(expr);
          aggregateNodes.add(expr);
          break;
        }
        default : break;
      }
    }

    public void pushNode(Stack < ExpressionNode > operands, int args, List < AggregatorExpressionNode > aggregateNodes)
    {
      switch (this)
      {
        case INTIF :
        {
          IntExpressionNode third = (IntExpressionNode) operands.pop();
          IntExpressionNode second = (IntExpressionNode) operands.pop();
          BooleanExpressionNode first = (BooleanExpressionNode) operands.pop();
          operands.push(new IntIf(first, second, third));
          break;
        }
        case INTSTEPINT :
        {
          int[] sentinels = new int[args];
          for(int i=args-1; i >= 0; i--)
          {
            sentinels[i] = ((IntLiteral) operands.pop()).evaluate(null, null);
          }
          int intercept = ((IntLiteral) operands.pop()).evaluate(null, null);
          int slope = ((IntLiteral) operands.pop()).evaluate(null, null);
          IntExpressionNode var = (IntExpressionNode) operands.pop();
          operands.push(new IntLinearStepperInt(var, slope, intercept, sentinels));
          break;
        }
        case INTMAX :
        {
          List < IntExpressionNode > params = new LinkedList < IntExpressionNode > ();
          for (int i = 0; i < args; i++)
          {
            params.add(0, (IntExpressionNode) operands.pop());
          }
          operands.push(new IntMax(params));
          break;
        }
        case INTMIN :
        {
          List < IntExpressionNode > params = new LinkedList < IntExpressionNode > ();
          for (int i = 0; i < args; i++)
          {
            params.add(0, (IntExpressionNode) operands.pop());
          }
          operands.push(new IntMin(params));
          break;
        }
        case INTAGGSUM :
        {
          IntExpressionNode param = (IntExpressionNode) operands.pop();
          AggregatorExpressionNode node = new IntAggregatorSum(param);
          aggregateNodes.add(node);
          operands.push(node);
          break;
        }
        case INTAGGPROD :
        {
          IntExpressionNode param = (IntExpressionNode) operands.pop();
          AggregatorExpressionNode node = new IntAggregatorProduct(param);
          aggregateNodes.add(node);
          operands.push(node);
          break;
        }
        case INTAGGMIN :
        {
          IntExpressionNode param = (IntExpressionNode) operands.pop();
          AggregatorExpressionNode node = new IntAggregatorMin(param);
          aggregateNodes.add(node);
          operands.push(node);
          break;
        }
        case INTAGGMAX :
        {
          IntExpressionNode param = (IntExpressionNode) operands.pop();
          AggregatorExpressionNode node = new IntAggregatorMax(param);
          aggregateNodes.add(node);
          operands.push(node);
          break;
        }
        case INTAGGBITAND :
        {
          IntExpressionNode param = (IntExpressionNode) operands.pop();
          AggregatorExpressionNode node = new IntAggregatorBitwiseAnd(param);
          aggregateNodes.add(node);
          operands.push(node);
          break;
        }
        case INTAGGBITOR :
        {
          IntExpressionNode param = (IntExpressionNode) operands.pop();
          AggregatorExpressionNode node = new IntAggregatorBitwiseOr(param);
          aggregateNodes.add(node);
          operands.push(node);
          break;
        }
        case INTSTRLEN :
        {
          StringExpressionNode param = (StringExpressionNode) operands.pop();
          operands.push(new IntLengthString(param));
          break;
        }
        case FLOATIF :
        {
          FloatExpressionNode third = (FloatExpressionNode) operands.pop();
          FloatExpressionNode second = (FloatExpressionNode) operands.pop();
          BooleanExpressionNode first = (BooleanExpressionNode) operands.pop();
          operands.push(new FloatIf(first, second, third));
          break;
        }
        case FLOATMAX :
        {
          List < FloatExpressionNode > params = new LinkedList < FloatExpressionNode > ();
          for (int i = 0; i < args; i++)
          {
            params.add(0, (FloatExpressionNode) operands.pop());
          }
          operands.push(new FloatMax(params));
          break;
        }
        case FLOATMIN :
        {
          List < FloatExpressionNode > params = new LinkedList < FloatExpressionNode > ();
          for (int i = 0; i < args; i++)
          {
            params.add(0, (FloatExpressionNode) operands.pop());
          }
          operands.push(new FloatMin(params));
          break;
        }
        case FLOATAGGSUM :
        {
          FloatExpressionNode param = (FloatExpressionNode) operands.pop();
          AggregatorExpressionNode node = new FloatAggregatorSum(param);
          aggregateNodes.add(node);
          operands.push(node);
          break;
        }
        case FLOATAGGPROD :
        {
          FloatExpressionNode param = (FloatExpressionNode) operands.pop();
          AggregatorExpressionNode node = new FloatAggregatorProduct(param);
          aggregateNodes.add(node);
          operands.push(node);
          break;
        }
        case FLOATAGGMIN :
        {
          FloatExpressionNode param = (FloatExpressionNode) operands.pop();
          operands.push(new FloatAggregatorMin(param));
          AggregatorExpressionNode node = new FloatAggregatorMin(param);
          aggregateNodes.add(node);
          operands.push(node);
          break;
        }
        case FLOATAGGMAX :
        {
          FloatExpressionNode param = (FloatExpressionNode) operands.pop();
          operands.push(new FloatAggregatorMax(param));
          AggregatorExpressionNode node = new FloatAggregatorMax(param);
          aggregateNodes.add(node);
          operands.push(node);
          break;
        }
        case STRINGCONCAT :
        {
          List < StringExpressionNode > params = new LinkedList < StringExpressionNode > ();
          for (int i = 0; i < args; i++)
          {
            params.add(0, (StringExpressionNode) operands.pop());
          }
          operands.push(new StringConcat(params));
          break;
        }
        case STRINGCONCATWS :
        {
          List < StringExpressionNode > params = new LinkedList < StringExpressionNode > ();
          for (int i = 0; i < args - 1; i++)
          {
            params.add(0, (StringExpressionNode) operands.pop());
          }
          StringExpressionNode sep = (StringExpressionNode) operands.pop();
          operands.push(new StringConcatSeperator(sep, params));
          break;
        }
        case STRINGAGGCONCAT :
        {
          StringExpressionNode param = (StringExpressionNode) operands.pop();
          AggregatorExpressionNode node = new StringAggregatorConcat(param);
          aggregateNodes.add(node);
          operands.push(node);
          break;
        }
        case STRINGAGGCONCATWS :
        {
          StringExpressionNode param = (StringExpressionNode) operands.pop();
          StringExpressionNode sep = (StringExpressionNode) operands.pop();
          AggregatorExpressionNode node = new StringAggregatorConcatSeperator(param, sep);
          aggregateNodes.add(node);
          operands.push(node);
          break;
        }
        case STRINGAGGCONCATWSEXT :
        {
          IntExpressionNode limit = (IntExpressionNode) operands.pop();
          IntExpressionNode offset = (IntExpressionNode) operands.pop();
          BooleanExpressionNode filter = (BooleanExpressionNode) operands.pop();
          StringExpressionNode param = (StringExpressionNode) operands.pop();
          StringExpressionNode sep = (StringExpressionNode) operands.pop();
          AggregatorExpressionNode node = new StringAggregatorConcatSeperatorExtended(param, sep, filter, offset, limit);
          aggregateNodes.add(node);
          operands.push(node);
          break;
        }
        case STRINGAGGCONCATFSPS :
        {
          IntLiteral limit = (IntLiteral) operands.pop();
          IntLiteral offset = (IntLiteral) operands.pop();
          BooleanExpressionNode filter = (BooleanExpressionNode) operands.pop();
          BooleanLiteral ascending = (BooleanLiteral) operands.pop();
          IntExpressionNode sortby = (IntExpressionNode) operands.pop();
          StringExpressionNode param = (StringExpressionNode) operands.pop();
          StringLiteral sep = (StringLiteral) operands.pop();
          AggregatorExpressionNode node = new StringAggregatorFilteredSortedPagedSeperatedConcat(param, sep, sortby, ascending, filter, offset, limit);
          aggregateNodes.add(node);
          operands.push(node);
          break;
        }
        case STRINGIF :
        {
          StringExpressionNode third = (StringExpressionNode) operands.pop();
          StringExpressionNode second = (StringExpressionNode) operands.pop();
          BooleanExpressionNode first = (BooleanExpressionNode) operands.pop();
          operands.push(new StringIf(first, second, third));
          break;
        }
        case BOOLIF :
        {
          BooleanExpressionNode third = (BooleanExpressionNode) operands.pop();
          BooleanExpressionNode second = (BooleanExpressionNode) operands.pop();
          BooleanExpressionNode first = (BooleanExpressionNode) operands.pop();
          operands.push(new BooleanIf(first, second, third));
          break;
        }
        default :
      }
    }

    public int precedence()
    {
      switch (this)
      {
        case INTPLUS : return 5;
        case INTSUB : return 5;
        case INTMUL : return 6;
        case INTDIV : return 6;
        case INTMOD : return 6;
        case INTBITAND : return 6;
        case INTBITOR : return 6;
        case INTBITNOT : return 7;
        case INTBITXOR : return 6;
        case INTSIGNEDSHIFTLEFT : return 6;
        case INTSIGNEDSHIFTRIGHT : return 6;
        case INTUNSIGNEDSHIFTRIGHT : return 6;
        case BOOLAND : return 2;
        case BOOLOR : return 2;
        case BOOLNOT : return 3;
        case BOOLINTEQL : return 4;
        case BOOLINTNEQ : return 4;
        case BOOLINTGEQ : return 4;
        case BOOLINTLEQ : return 4;
        case BOOLINTGRE : return 4;
        case BOOLINTLES : return 4;
        case BOOLSTRINGEQL : return 4;
        case BOOLSTRINGNEQ : return 4;
        case RB : return 0;
        case LB : return 0;
        default : return 0;
      }
    }
  }

  private void procLB()
  {
    operators.push(Operator.LB);
  }

  private void procRB()
  {
    Operator currOp;
    while (!operators.isEmpty() && (currOp = operators.pop()) != Operator.LB)
    {
      currOp.pushNode(operands);
    }
  }

  private void procOp(Operator op)
  {
    int prec = op.precedence();
    while (!operators.isEmpty() && operators.peek().precedence() >= prec)
    {
      operators.pop().pushNode(operands);
    }
    operators.push(op);
  }

  private void procOp(Operator op, int args)
  {
    op.pushNode(operands, args, aggregateNodes);
  }

  private void procOpJS(Operator op, Map < String, IntExpressionNode > intvars, Map < String, FloatExpressionNode > floatvars, Map < String, DoubleExpressionNode > doublevars, Map < String, BooleanExpressionNode > booleanvars, Map < String, StringExpressionNode > stringvars)
  {
    op.pushNode(operands, scope, intvars, floatvars, doublevars, booleanvars, stringvars, aggregateNodes);
  }

  final public ExpressionTree parse(Scriptable scope) throws ParseException {
  this.scope = scope;
    if (jj_2_1(50000)) {
      boolexpression();
      jj_consume_token(0);
    procRB();
    BooleanExpressionNode root = (BooleanExpressionNode) operands.pop();
    if (hasAggregates)
    {
      {if (true) return new BooleanAggregatingExpressionTree(root, intVars, floatVars, doubleVars, booleanVars, stringVars, aggregateNodes);}
    }
    else
    {
      {if (true) return new BooleanExpressionTree(root, intVars, floatVars, doubleVars, booleanVars, stringVars);}
    }
    } else if (jj_2_2(50000)) {
      intexpression();
      jj_consume_token(0);
    procRB();
    IntExpressionNode root = (IntExpressionNode) operands.pop();
    if (hasAggregates)
    {
      {if (true) return new IntAggregatingExpressionTree(root, intVars, floatVars, doubleVars, booleanVars, stringVars, aggregateNodes);}
    }
    else
    {
      {if (true) return new IntExpressionTree(root, intVars, floatVars, doubleVars, booleanVars, stringVars);}
    }
    } else if (jj_2_3(50000)) {
      stringexpression();
      jj_consume_token(0);
    procRB();
    StringExpressionNode root = (StringExpressionNode) operands.pop();
    if (hasAggregates)
    {
      {if (true) return new StringAggregatingExpressionTree(root, intVars, floatVars, doubleVars, booleanVars, stringVars, aggregateNodes);}
    }
    else
    {
      {if (true) return new StringExpressionTree(root, intVars, floatVars, doubleVars, booleanVars, stringVars);}
    }
    } else if (jj_2_4(50000)) {
      floatexpression();
      jj_consume_token(0);
    procRB();
    FloatExpressionNode root = (FloatExpressionNode) operands.pop();
    if (hasAggregates)
    {
      {if (true) return new FloatAggregatingExpressionTree(root, intVars, floatVars, doubleVars, booleanVars, stringVars, aggregateNodes);}
    }
    else
    {
      {if (true) return new FloatExpressionTree(root, intVars, floatVars, doubleVars, booleanVars, stringVars);}
    }

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void namedexpression(Map < String, IntExpressionNode > intvars, Map < String, FloatExpressionNode > floatvars, Map < String, DoubleExpressionNode > doublevars, Map < String, BooleanExpressionNode > booleanvars, Map < String, StringExpressionNode > stringvars) throws ParseException {
  Token t;
    if (jj_2_5(50000)) {
      t = jj_consume_token(ID);
      jj_consume_token(ASSIGNMENT);
      boolexpression();
    BooleanExpressionNode root = (BooleanExpressionNode) operands.pop();
    booleanvars.put(t.toString(), root);
    } else if (jj_2_6(50000)) {
      t = jj_consume_token(ID);
      jj_consume_token(ASSIGNMENT);
      intexpression();
    IntExpressionNode root = (IntExpressionNode) operands.pop();
    intvars.put(t.toString(), root);
    } else if (jj_2_7(50000)) {
      t = jj_consume_token(ID);
      jj_consume_token(ASSIGNMENT);
      stringexpression();
    StringExpressionNode root = (StringExpressionNode) operands.pop();
    stringvars.put(t.toString(), root);
    } else if (jj_2_8(50000)) {
      t = jj_consume_token(ID);
      jj_consume_token(ASSIGNMENT);
      stringexpression();
    FloatExpressionNode root = (FloatExpressionNode) operands.pop();
    floatvars.put(t.toString(), root);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void stringexpression() throws ParseException {
    if (jj_2_9(50000)) {
      stringleaf();
    } else if (jj_2_10(50000)) {
      lb();
      stringexpression();
      rb();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }

  }

  final public void floatexpression() throws ParseException {
    if (jj_2_12(50000)) {
      floatleaf();
      floatbinaryoperator();
      floatexpression();
    } else if (jj_2_13(50000)) {
      lb();
      floatexpression();
      rb();
      if (jj_2_11(50000)) {
        floatbinaryoperator();
        floatexpression();
      } else {
        ;
      }
    } else if (jj_2_14(50000)) {
      floatleaf();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }

  }

  final public void intexpression() throws ParseException {
    if (jj_2_16(50000)) {
      intleaf();
      intbinaryoperator();
      intexpression();
    } else if (jj_2_17(50000)) {
      intunaryoperator();
      intexpression();
    } else if (jj_2_18(50000)) {
      lb();
      intexpression();
      rb();
      if (jj_2_15(50000)) {
        intbinaryoperator();
        intexpression();
      } else {
        ;
      }
    } else if (jj_2_19(50000)) {
      intleaf();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }

  }

  final public void boolexpression() throws ParseException {
    if (jj_2_21(50000)) {
      boolleaf();
      boolbinaryoperator();
      boolexpression();
    } else if (jj_2_22(50000)) {
      boolunaryoperator();
      boolexpression();
    } else if (jj_2_23(50000)) {
      lb();
      boolexpression();
      rb();
      if (jj_2_20(50000)) {
        boolbinaryoperator();
        boolexpression();
      } else {
        ;
      }
    } else if (jj_2_24(50000)) {
      boolleaf();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }

  }

  final public void intmax() throws ParseException {
  int i = 0;
    jj_consume_token(MAX);
    lb();
    intexpression();
      i++;
    label_1:
    while (true) {
      if (jj_2_25(50000)) {
        ;
      } else {
        break label_1;
      }
      comma();
      intexpression();
        i++;
    }
    rb();
    procOp(Operator.INTMAX, i);
  }

  final public void floatmax() throws ParseException {
  int i = 0;
    jj_consume_token(MAX);
    lb();
    floatexpression();
      i++;
    label_2:
    while (true) {
      if (jj_2_26(50000)) {
        ;
      } else {
        break label_2;
      }
      comma();
      floatexpression();
        i++;
    }
    rb();
    procOp(Operator.FLOATMAX, i);
  }

  final public void intmin() throws ParseException {
  int i = 0;
    jj_consume_token(MAX);
    lb();
    intexpression();
      i++;
    label_3:
    while (true) {
      if (jj_2_27(50000)) {
        ;
      } else {
        break label_3;
      }
      comma();
      intexpression();
        i++;
    }
    rb();
    procOp(Operator.INTMIN, i);
  }

  final public void floatmin() throws ParseException {
  int i = 0;
    jj_consume_token(MAX);
    lb();
    floatexpression();
      i++;
    label_4:
    while (true) {
      if (jj_2_28(50000)) {
        ;
      } else {
        break label_4;
      }
      comma();
      floatexpression();
        i++;
    }
    rb();
    procOp(Operator.FLOATMIN, i);
  }

  final public void intaggsum() throws ParseException {
    jj_consume_token(AGGSUM);
    lb();
    intexpression();
    rb();
    procOp(Operator.INTAGGSUM, 1);
    hasAggregates = true;
  }

  final public void floataggsum() throws ParseException {
    jj_consume_token(AGGSUM);
    lb();
    floatexpression();
    rb();
    procOp(Operator.FLOATAGGSUM, 1);
    hasAggregates = true;
  }

  final public void intaggmax() throws ParseException {
    jj_consume_token(AGGMAX);
    lb();
    intexpression();
    rb();
    procOp(Operator.INTAGGMAX, 1);
    hasAggregates = true;
  }

  final public void floataggmax() throws ParseException {
    jj_consume_token(AGGMAX);
    lb();
    floatexpression();
    rb();
    procOp(Operator.FLOATAGGMAX, 1);
    hasAggregates = true;
  }

  final public void intaggmin() throws ParseException {
    jj_consume_token(AGGMIN);
    lb();
    intexpression();
    rb();
    procOp(Operator.INTAGGMIN, 1);
    hasAggregates = true;
  }

  final public void floataggmin() throws ParseException {
    jj_consume_token(AGGMIN);
    lb();
    floatexpression();
    rb();
    procOp(Operator.FLOATAGGMIN, 1);
    hasAggregates = true;
  }

  final public void intaggbitand() throws ParseException {
    jj_consume_token(AGGBITAND);
    lb();
    intexpression();
    rb();
    procOp(Operator.INTAGGBITAND, 1);
    hasAggregates = true;
  }

  final public void intaggbitor() throws ParseException {
    jj_consume_token(AGGBITOR);
    lb();
    intexpression();
    rb();
    procOp(Operator.INTAGGBITOR, 1);
    hasAggregates = true;
  }

  final public void intaggproduct() throws ParseException {
    jj_consume_token(AGGPROD);
    lb();
    intexpression();
    rb();
    procOp(Operator.INTAGGPROD, 1);
    hasAggregates = true;
  }

  final public void floataggproduct() throws ParseException {
    jj_consume_token(AGGPROD);
    lb();
    floatexpression();
    rb();
    procOp(Operator.FLOATAGGPROD, 1);
    hasAggregates = true;
  }

  final public void intjsexpression() throws ParseException {
  Map < String, IntExpressionNode > intvars = new HashMap < String, IntExpressionNode > ();
  Map < String, FloatExpressionNode > floatvars = new HashMap < String, FloatExpressionNode > ();
  Map < String, DoubleExpressionNode > doublevars = new HashMap < String, DoubleExpressionNode > ();
  Map < String, BooleanExpressionNode > booleanvars = new HashMap < String, BooleanExpressionNode > ();
  Map < String, StringExpressionNode > stringvars = new HashMap < String, StringExpressionNode > ();
    jj_consume_token(INTTYPE);
    jj_consume_token(JS);
    lb();
    stringliteral();
    label_5:
    while (true) {
      if (jj_2_29(50000)) {
        ;
      } else {
        break label_5;
      }
      comma();
      namedexpression(intvars, floatvars, doublevars, booleanvars, stringvars);
    }
    rb();
    procOpJS(Operator.INTJS, intvars, floatvars, doublevars, booleanvars, stringvars);
  }

  final public void intlatejsexpression() throws ParseException {
  Map < String, IntExpressionNode > intvars = new HashMap < String, IntExpressionNode > ();
  Map < String, FloatExpressionNode > floatvars = new HashMap < String, FloatExpressionNode > ();
  Map < String, DoubleExpressionNode > doublevars = new HashMap < String, DoubleExpressionNode > ();
  Map < String, BooleanExpressionNode > booleanvars = new HashMap < String, BooleanExpressionNode > ();
  Map < String, StringExpressionNode > stringvars = new HashMap < String, StringExpressionNode > ();
    jj_consume_token(INTTYPE);
    jj_consume_token(LATEJS);
    lb();
    stringliteral();
    label_6:
    while (true) {
      if (jj_2_30(50000)) {
        ;
      } else {
        break label_6;
      }
      comma();
      namedexpression(intvars, floatvars, doublevars, booleanvars, stringvars);
    }
    rb();
    procOpJS(Operator.INTLATEJS, intvars, floatvars, doublevars, booleanvars, stringvars);
    hasAggregates = true;
  }

  final public void floatjsexpression() throws ParseException {
  Map < String, IntExpressionNode > intvars = new HashMap < String, IntExpressionNode > ();
  Map < String, FloatExpressionNode > floatvars = new HashMap < String, FloatExpressionNode > ();
  Map < String, DoubleExpressionNode > doublevars = new HashMap < String, DoubleExpressionNode > ();
  Map < String, BooleanExpressionNode > booleanvars = new HashMap < String, BooleanExpressionNode > ();
  Map < String, StringExpressionNode > stringvars = new HashMap < String, StringExpressionNode > ();
    jj_consume_token(FLOATTYPE);
    jj_consume_token(JS);
    lb();
    stringliteral();
    label_7:
    while (true) {
      if (jj_2_31(50000)) {
        ;
      } else {
        break label_7;
      }
      comma();
      namedexpression(intvars, floatvars, doublevars, booleanvars, stringvars);
    }
    rb();
    procOpJS(Operator.FLOATJS, intvars, floatvars, doublevars, booleanvars, stringvars);
  }

  final public void floatlatejsexpression() throws ParseException {
  Map < String, IntExpressionNode > intvars = new HashMap < String, IntExpressionNode > ();
  Map < String, FloatExpressionNode > floatvars = new HashMap < String, FloatExpressionNode > ();
  Map < String, DoubleExpressionNode > doublevars = new HashMap < String, DoubleExpressionNode > ();
  Map < String, BooleanExpressionNode > booleanvars = new HashMap < String, BooleanExpressionNode > ();
  Map < String, StringExpressionNode > stringvars = new HashMap < String, StringExpressionNode > ();
    jj_consume_token(FLOATTYPE);
    jj_consume_token(LATEJS);
    lb();
    stringliteral();
    label_8:
    while (true) {
      if (jj_2_32(50000)) {
        ;
      } else {
        break label_8;
      }
      comma();
      namedexpression(intvars, floatvars, doublevars, booleanvars, stringvars);
    }
    rb();
    procOpJS(Operator.FLOATLATEJS, intvars, floatvars, doublevars, booleanvars, stringvars);
    hasAggregates = true;
  }

  final public void intif() throws ParseException {
    jj_consume_token(IF);
    lb();
    boolexpression();
    comma();
    intexpression();
    comma();
    intexpression();
    rb();
    procOp(Operator.INTIF, 3);
  }

  final public void intstep() throws ParseException {
  int i=0;
    jj_consume_token(STEP);
    lb();
    intexpression();
    comma();
    intliteral();
    comma();
    intliteral();
    label_9:
    while (true) {
      if (jj_2_33(50000)) {
        ;
      } else {
        break label_9;
      }
      comma();
      intliteral();
        i++;
    }
    rb();
    procOp(Operator.INTSTEPINT, i);
  }

  final public void floatif() throws ParseException {
    jj_consume_token(IF);
    lb();
    boolexpression();
    comma();
    floatexpression();
    comma();
    floatexpression();
    rb();
    procOp(Operator.FLOATIF, 3);
  }

  final public void stringif() throws ParseException {
    jj_consume_token(IF);
    lb();
    boolexpression();
    comma();
    stringexpression();
    comma();
    stringexpression();
    rb();
    procOp(Operator.STRINGIF, 3);
  }

  final public void intstringlength() throws ParseException {
    jj_consume_token(STRLEN);
    lb();
    stringexpression();
    rb();
    procOp(Operator.INTSTRLEN, 1);
  }

///////////////////////////////////////////////////////////////
  final public void stringconcat() throws ParseException {
  int i = 0;
    jj_consume_token(CONCAT);
    lb();
    stringexpression();
      i++;
    label_10:
    while (true) {
      if (jj_2_34(50000)) {
        ;
      } else {
        break label_10;
      }
      comma();
      stringexpression();
        i++;
    }
    rb();
    procOp(Operator.STRINGCONCAT, i);
  }

  final public void stringconcatws() throws ParseException {
  int i = 0;
    jj_consume_token(CONCATWS);
    lb();
    stringexpression();
      i++;
    comma();
    stringexpression();
      i++;
    label_11:
    while (true) {
      if (jj_2_35(50000)) {
        ;
      } else {
        break label_11;
      }
      comma();
      stringexpression();
        i++;
    }
    rb();
    procOp(Operator.STRINGCONCATWS, i);
  }

  final public void stringaggconcat() throws ParseException {
    jj_consume_token(AGGCONCAT);
    lb();
    stringexpression();
    rb();
    procOp(Operator.STRINGAGGCONCAT, 1);
    hasAggregates = true;
  }

  final public void stringaggconcatws() throws ParseException {
    jj_consume_token(AGGCONCATWS);
    lb();
    stringexpression();
    comma();
    stringexpression();
    rb();
    procOp(Operator.STRINGAGGCONCATWS, 2);
    hasAggregates = true;
  }

  final public void stringaggconcatwsext() throws ParseException {
    jj_consume_token(AGGCONCATWSEXT);
    lb();
    stringexpression();
    comma();
    stringexpression();
    comma();
    boolexpression();
    comma();
    intexpression();
    comma();
    intexpression();
    rb();
    procOp(Operator.STRINGAGGCONCATWSEXT, 5);
    hasAggregates = true;
  }

  final public void stringaggconcatfsps() throws ParseException {
    jj_consume_token(AGGCONCATFSPS);
    lb();
    stringliteral();
    comma();
    stringexpression();
    comma();
    intexpression();
    comma();
    boolliteral();
    comma();
    boolexpression();
    comma();
    intliteral();
    comma();
    intliteral();
    rb();
    procOp(Operator.STRINGAGGCONCATFSPS, 7);
    hasAggregates = true;
  }

///////////////////////////////////////////////////////////////
  final public void boolif() throws ParseException {
    jj_consume_token(IF);
    lb();
    boolexpression();
    comma();
    boolexpression();
    comma();
    boolexpression();
    rb();
    procOp(Operator.BOOLIF, 3);
  }

  final public void intcompare() throws ParseException {
    if (jj_2_36(50000)) {
      jj_consume_token(EQL);
      procOp(Operator.BOOLINTEQL);
    } else if (jj_2_37(50000)) {
      jj_consume_token(NEQ);
      procOp(Operator.BOOLINTNEQ);
    } else if (jj_2_38(50000)) {
      jj_consume_token(GEQ);
      procOp(Operator.BOOLINTGEQ);
    } else if (jj_2_39(50000)) {
      jj_consume_token(LEQ);
      procOp(Operator.BOOLINTLEQ);
    } else if (jj_2_40(50000)) {
      jj_consume_token(GRE);
      procOp(Operator.BOOLINTGRE);
    } else if (jj_2_41(50000)) {
      jj_consume_token(LES);
      procOp(Operator.BOOLINTLES);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }

  }

  final public void stringcompare() throws ParseException {
    if (jj_2_42(50000)) {
      jj_consume_token(EQL);
      procOp(Operator.BOOLSTRINGEQL);
    } else if (jj_2_43(50000)) {
      jj_consume_token(NEQ);
      procOp(Operator.BOOLSTRINGNEQ);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }

  }

  final public void boolbinaryoperator() throws ParseException {
    if (jj_2_44(50000)) {
      jj_consume_token(AND);
      procOp(Operator.BOOLAND);
    } else if (jj_2_45(50000)) {
      jj_consume_token(OR);
      procOp(Operator.BOOLOR);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }

  }

  final public void boolunaryoperator() throws ParseException {
    jj_consume_token(NOT);
    procOp(Operator.BOOLNOT);
  }

  final public void intbinaryoperator() throws ParseException {
    if (jj_2_46(50000)) {
      jj_consume_token(PLUS);
      procOp(Operator.INTPLUS);
    } else if (jj_2_47(50000)) {
      jj_consume_token(SUB);
      procOp(Operator.INTSUB);
    } else if (jj_2_48(50000)) {
      jj_consume_token(MUL);
      procOp(Operator.INTMUL);
    } else if (jj_2_49(50000)) {
      jj_consume_token(DIV);
      procOp(Operator.INTDIV);
    } else if (jj_2_50(50000)) {
      jj_consume_token(MOD);
      procOp(Operator.INTMOD);
    } else if (jj_2_51(50000)) {
      jj_consume_token(BITOR);
      procOp(Operator.INTBITOR);
    } else if (jj_2_52(50000)) {
      jj_consume_token(BITAND);
      procOp(Operator.INTBITAND);
    } else if (jj_2_53(50000)) {
      jj_consume_token(BITXOR);
      procOp(Operator.INTBITXOR);
    } else if (jj_2_54(50000)) {
      jj_consume_token(SIGNEDSHIFTLEFT);
      procOp(Operator.INTSIGNEDSHIFTLEFT);
    } else if (jj_2_55(50000)) {
      jj_consume_token(SIGNEDSHIFTRIGHT);
      procOp(Operator.INTSIGNEDSHIFTRIGHT);
    } else if (jj_2_56(50000)) {
      jj_consume_token(UNSIGNEDSHIFTRIGHT);
      procOp(Operator.INTUNSIGNEDSHIFTRIGHT);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }

  }

  final public void intunaryoperator() throws ParseException {
    jj_consume_token(BITNOT);
      procOp(Operator.INTBITNOT);

  }

  final public void floatbinaryoperator() throws ParseException {
    if (jj_2_57(50000)) {
      jj_consume_token(PLUS);
      procOp(Operator.FLOATPLUS);
    } else if (jj_2_58(50000)) {
      jj_consume_token(SUB);
      procOp(Operator.FLOATSUB);
    } else if (jj_2_59(50000)) {
      jj_consume_token(MUL);
      procOp(Operator.FLOATMUL);
    } else if (jj_2_60(50000)) {
      jj_consume_token(DIV);
      procOp(Operator.FLOATDIV);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }

  }

  final public void stringleaf() throws ParseException {
  Token t;
    if (jj_2_61(50000)) {
      stringconcat();
    } else if (jj_2_62(50000)) {
      stringconcatws();
    } else if (jj_2_63(50000)) {
      stringaggconcat();
    } else if (jj_2_64(50000)) {
      stringaggconcatws();
    } else if (jj_2_65(50000)) {
      stringaggconcatwsext();
    } else if (jj_2_66(50000)) {
      stringaggconcatfsps();
    } else if (jj_2_67(50000)) {
      stringif();
    } else if (jj_2_68(50000)) {
      stringjsexpression();
    } else if (jj_2_69(50000)) {
      stringlatejsexpression();
    } else if (jj_2_70(50000)) {
      jj_consume_token(STRINGTYPE);
      t = jj_consume_token(ID);
    AggregatorExpressionNode node = new StringVariable(t.toString());
    operands.push(node);
    aggregateNodes.add(node);
    stringVars.add(t.toString());
    } else if (jj_2_71(50000)) {
      stringliteral();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void stringjsexpression() throws ParseException {
  Map < String, IntExpressionNode > intvars = new HashMap < String, IntExpressionNode > ();
  Map < String, FloatExpressionNode > floatvars = new HashMap < String, FloatExpressionNode > ();
  Map < String, DoubleExpressionNode > doublevars = new HashMap < String, DoubleExpressionNode > ();
  Map < String, BooleanExpressionNode > booleanvars = new HashMap < String, BooleanExpressionNode > ();
  Map < String, StringExpressionNode > stringvars = new HashMap < String, StringExpressionNode > ();
    jj_consume_token(STRINGTYPE);
    jj_consume_token(JS);
    lb();
    stringliteral();
    label_12:
    while (true) {
      if (jj_2_72(50000)) {
        ;
      } else {
        break label_12;
      }
      comma();
      namedexpression(intvars, floatvars, doublevars, booleanvars, stringvars);
    }
    rb();
    procOpJS(Operator.STRINGJS, intvars, floatvars, doublevars, booleanvars, stringvars);
  }

  final public void stringlatejsexpression() throws ParseException {
  Map < String, IntExpressionNode > intvars = new HashMap < String, IntExpressionNode > ();
  Map < String, FloatExpressionNode > floatvars = new HashMap < String, FloatExpressionNode > ();
  Map < String, DoubleExpressionNode > doublevars = new HashMap < String, DoubleExpressionNode > ();
  Map < String, BooleanExpressionNode > booleanvars = new HashMap < String, BooleanExpressionNode > ();
  Map < String, StringExpressionNode > stringvars = new HashMap < String, StringExpressionNode > ();
    jj_consume_token(STRINGTYPE);
    jj_consume_token(LATEJS);
    lb();
    stringliteral();
    label_13:
    while (true) {
      if (jj_2_73(50000)) {
        ;
      } else {
        break label_13;
      }
      comma();
      namedexpression(intvars, floatvars, doublevars, booleanvars, stringvars);
    }
    rb();
    procOpJS(Operator.STRINGLATEJS, intvars, floatvars, doublevars, booleanvars, stringvars);
    hasAggregates = true;
  }

  final public void stringliteral() throws ParseException {
  Token t;
    t = jj_consume_token(STRING);
    operands.push(new StringLiteral(t.toString().trim().substring(1, t.toString().trim().length() - 1)));
  }

  final public void floatleaf() throws ParseException {
  Token t;
    if (jj_2_74(50000)) {
      floatif();
    } else if (jj_2_75(50000)) {
      floatmax();
    } else if (jj_2_76(50000)) {
      floatmin();
    } else if (jj_2_77(50000)) {
      floatjsexpression();
    } else if (jj_2_78(50000)) {
      floatlatejsexpression();
    } else if (jj_2_79(50000)) {
      floataggsum();
    } else if (jj_2_80(50000)) {
      floataggmax();
    } else if (jj_2_81(50000)) {
      floataggmin();
    } else if (jj_2_82(50000)) {
      floataggproduct();
    } else if (jj_2_83(50000)) {
      jj_consume_token(FLOATTYPE);
      t = jj_consume_token(ID);
    AggregatorExpressionNode node = new FloatVariable(t.toString());
    operands.push(node);
    aggregateNodes.add(node);
    floatVars.add(t.toString());
    } else if (jj_2_84(50000)) {
      t = jj_consume_token(FLOAT);
    operands.push(new FloatLiteral(Float.parseFloat(t.toString())));
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void intleaf() throws ParseException {
  Token t;
    if (jj_2_85(50000)) {
      intif();
    } else if (jj_2_86(50000)) {
      intmax();
    } else if (jj_2_87(50000)) {
      intmin();
    } else if (jj_2_88(50000)) {
      intjsexpression();
    } else if (jj_2_89(50000)) {
      intlatejsexpression();
    } else if (jj_2_90(50000)) {
      intaggsum();
    } else if (jj_2_91(50000)) {
      intstep();
    } else if (jj_2_92(50000)) {
      intaggmax();
    } else if (jj_2_93(50000)) {
      intaggmin();
    } else if (jj_2_94(50000)) {
      intaggbitand();
    } else if (jj_2_95(50000)) {
      intaggbitor();
    } else if (jj_2_96(50000)) {
      intaggproduct();
    } else if (jj_2_97(50000)) {
      intstringlength();
    } else if (jj_2_98(50000)) {
      jj_consume_token(INTTYPE);
      t = jj_consume_token(ID);
    AggregatorExpressionNode node = new IntVariable(t.toString());
    operands.push(node);
    aggregateNodes.add(node);
    intVars.add(t.toString());
    } else if (jj_2_99(50000)) {
      intliteral();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void intliteral() throws ParseException {
  Token t;
    t = jj_consume_token(INT);
    operands.push(new IntLiteral(Integer.parseInt(t.toString())));
  }

  final public void boolleaf() throws ParseException {
  Token t;
    if (jj_2_100(50000)) {
      boolif();
    } else if (jj_2_101(50000)) {
      booljsexpression();
    } else if (jj_2_102(50000)) {
      boollatejsexpression();
    } else if (jj_2_103(50000)) {
      intexpression();
      intcompare();
      intexpression();
    } else if (jj_2_104(50000)) {
      stringexpression();
      stringcompare();
      stringexpression();
    } else if (jj_2_105(50000)) {
      jj_consume_token(BOOLTYPE);
      t = jj_consume_token(ID);
    AggregatorExpressionNode node = new BooleanVariable(t.toString());
    operands.push(node);
    aggregateNodes.add(node);
    booleanVars.add(t.toString());
    } else if (jj_2_106(50000)) {
      boolliteral();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void boolliteral() throws ParseException {
  Token t;
    t = jj_consume_token(BOOL);
    operands.push(new BooleanLiteral(Boolean.parseBoolean(t.toString())));
  }

  final public void booljsexpression() throws ParseException {
  Map < String, IntExpressionNode > intvars = new HashMap < String, IntExpressionNode > ();
  Map < String, FloatExpressionNode > floatvars = new HashMap < String, FloatExpressionNode > ();
  Map < String, DoubleExpressionNode > doublevars = new HashMap < String, DoubleExpressionNode > ();
  Map < String, BooleanExpressionNode > booleanvars = new HashMap < String, BooleanExpressionNode > ();
  Map < String, StringExpressionNode > stringvars = new HashMap < String, StringExpressionNode > ();
    jj_consume_token(BOOLTYPE);
    jj_consume_token(JS);
    lb();
    stringliteral();
    label_14:
    while (true) {
      if (jj_2_107(50000)) {
        ;
      } else {
        break label_14;
      }
      comma();
      namedexpression(intvars, floatvars, doublevars, booleanvars, stringvars);
    }
    rb();
    procOpJS(Operator.BOOLJS, intvars, floatvars, doublevars, booleanvars, stringvars);
  }

  final public void boollatejsexpression() throws ParseException {
  Map < String, IntExpressionNode > intvars = new HashMap < String, IntExpressionNode > ();
  Map < String, FloatExpressionNode > floatvars = new HashMap < String, FloatExpressionNode > ();
  Map < String, DoubleExpressionNode > doublevars = new HashMap < String, DoubleExpressionNode > ();
  Map < String, BooleanExpressionNode > booleanvars = new HashMap < String, BooleanExpressionNode > ();
  Map < String, StringExpressionNode > stringvars = new HashMap < String, StringExpressionNode > ();
    jj_consume_token(BOOLTYPE);
    jj_consume_token(LATEJS);
    lb();
    stringliteral();
    label_15:
    while (true) {
      if (jj_2_108(50000)) {
        ;
      } else {
        break label_15;
      }
      comma();
      namedexpression(intvars, floatvars, doublevars, booleanvars, stringvars);
    }
    rb();
    procOpJS(Operator.BOOLLATEJS, intvars, floatvars, doublevars, booleanvars, stringvars);
    hasAggregates = true;
  }

  final public void lb() throws ParseException {
    jj_consume_token(LB);
    procLB();
  }

  final public void rb() throws ParseException {
    jj_consume_token(RB);
    procRB();
  }

  final public void comma() throws ParseException {
    jj_consume_token(COM);
    procRB();
    procLB();
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  private boolean jj_2_71(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  private boolean jj_2_72(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(71, xla); }
  }

  private boolean jj_2_73(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(72, xla); }
  }

  private boolean jj_2_74(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_74(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(73, xla); }
  }

  private boolean jj_2_75(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_75(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(74, xla); }
  }

  private boolean jj_2_76(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_76(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(75, xla); }
  }

  private boolean jj_2_77(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_77(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(76, xla); }
  }

  private boolean jj_2_78(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_78(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(77, xla); }
  }

  private boolean jj_2_79(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_79(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(78, xla); }
  }

  private boolean jj_2_80(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_80(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(79, xla); }
  }

  private boolean jj_2_81(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_81(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(80, xla); }
  }

  private boolean jj_2_82(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_82(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(81, xla); }
  }

  private boolean jj_2_83(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_83(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(82, xla); }
  }

  private boolean jj_2_84(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_84(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(83, xla); }
  }

  private boolean jj_2_85(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_85(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(84, xla); }
  }

  private boolean jj_2_86(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_86(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(85, xla); }
  }

  private boolean jj_2_87(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_87(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(86, xla); }
  }

  private boolean jj_2_88(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_88(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(87, xla); }
  }

  private boolean jj_2_89(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_89(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(88, xla); }
  }

  private boolean jj_2_90(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_90(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(89, xla); }
  }

  private boolean jj_2_91(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_91(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(90, xla); }
  }

  private boolean jj_2_92(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_92(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(91, xla); }
  }

  private boolean jj_2_93(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_93(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(92, xla); }
  }

  private boolean jj_2_94(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_94(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(93, xla); }
  }

  private boolean jj_2_95(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_95(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(94, xla); }
  }

  private boolean jj_2_96(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_96(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(95, xla); }
  }

  private boolean jj_2_97(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_97(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(96, xla); }
  }

  private boolean jj_2_98(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_98(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(97, xla); }
  }

  private boolean jj_2_99(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_99(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(98, xla); }
  }

  private boolean jj_2_100(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_100(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(99, xla); }
  }

  private boolean jj_2_101(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_101(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(100, xla); }
  }

  private boolean jj_2_102(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_102(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(101, xla); }
  }

  private boolean jj_2_103(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_103(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(102, xla); }
  }

  private boolean jj_2_104(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_104(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(103, xla); }
  }

  private boolean jj_2_105(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_105(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(104, xla); }
  }

  private boolean jj_2_106(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_106(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(105, xla); }
  }

  private boolean jj_2_107(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_107(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(106, xla); }
  }

  private boolean jj_2_108(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_108(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(107, xla); }
  }

  private boolean jj_3_2() {
    if (jj_3R_17()) return true;
    if (jj_scan_token(0)) return true;
    return false;
  }

  private boolean jj_3_30() {
    if (jj_3R_31()) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3_60() {
    if (jj_scan_token(DIV)) return true;
    return false;
  }

  private boolean jj_3_59() {
    if (jj_scan_token(MUL)) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(INTTYPE)) return true;
    if (jj_scan_token(LATEJS)) return true;
    if (jj_3R_21()) return true;
    if (jj_3R_43()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_30()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_58() {
    if (jj_scan_token(SUB)) return true;
    return false;
  }

  private boolean jj_3_57() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_16()) return true;
    if (jj_scan_token(0)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_57()) {
    jj_scanpos = xsp;
    if (jj_3_58()) {
    jj_scanpos = xsp;
    if (jj_3_59()) {
    jj_scanpos = xsp;
    if (jj_3_60()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_29() {
    if (jj_3R_31()) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(INTTYPE)) return true;
    if (jj_scan_token(JS)) return true;
    if (jj_3R_21()) return true;
    if (jj_3R_43()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_29()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(BITNOT)) return true;
    return false;
  }

  private boolean jj_3_56() {
    if (jj_scan_token(UNSIGNEDSHIFTRIGHT)) return true;
    return false;
  }

  private boolean jj_3_55() {
    if (jj_scan_token(SIGNEDSHIFTRIGHT)) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(AGGPROD)) return true;
    if (jj_3R_21()) return true;
    if (jj_3R_19()) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_54() {
    if (jj_scan_token(SIGNEDSHIFTLEFT)) return true;
    return false;
  }

  private boolean jj_3_53() {
    if (jj_scan_token(BITXOR)) return true;
    return false;
  }

  private boolean jj_3_52() {
    if (jj_scan_token(BITAND)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(AGGPROD)) return true;
    if (jj_3R_21()) return true;
    if (jj_3R_17()) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_51() {
    if (jj_scan_token(BITOR)) return true;
    return false;
  }

  private boolean jj_3_50() {
    if (jj_scan_token(MOD)) return true;
    return false;
  }

  private boolean jj_3_49() {
    if (jj_scan_token(DIV)) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(AGGBITOR)) return true;
    if (jj_3R_21()) return true;
    if (jj_3R_17()) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_48() {
    if (jj_scan_token(MUL)) return true;
    return false;
  }

  private boolean jj_3_47() {
    if (jj_scan_token(SUB)) return true;
    return false;
  }

  private boolean jj_3_46() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3_48()) {
    jj_scanpos = xsp;
    if (jj_3_49()) {
    jj_scanpos = xsp;
    if (jj_3_50()) {
    jj_scanpos = xsp;
    if (jj_3_51()) {
    jj_scanpos = xsp;
    if (jj_3_52()) {
    jj_scanpos = xsp;
    if (jj_3_53()) {
    jj_scanpos = xsp;
    if (jj_3_54()) {
    jj_scanpos = xsp;
    if (jj_3_55()) {
    jj_scanpos = xsp;
    if (jj_3_56()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(AGGBITAND)) return true;
    if (jj_3R_21()) return true;
    if (jj_3R_17()) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(AGGMIN)) return true;
    if (jj_3R_21()) return true;
    if (jj_3R_19()) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_45() {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  private boolean jj_3_44() {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(AGGMIN)) return true;
    if (jj_3R_21()) return true;
    if (jj_3R_17()) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_44()) {
    jj_scanpos = xsp;
    if (jj_3_45()) return true;
    }
    return false;
  }

  private boolean jj_3_43() {
    if (jj_scan_token(NEQ)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(AGGMAX)) return true;
    if (jj_3R_21()) return true;
    if (jj_3R_19()) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_42() {
    if (jj_scan_token(EQL)) return true;
    return false;
  }

  private boolean jj_3R_70() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_42()) {
    jj_scanpos = xsp;
    if (jj_3_43()) return true;
    }
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(AGGMAX)) return true;
    if (jj_3R_21()) return true;
    if (jj_3R_17()) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_41() {
    if (jj_scan_token(LES)) return true;
    return false;
  }

  private boolean jj_3_40() {
    if (jj_scan_token(GRE)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(COM)) return true;
    return false;
  }

  private boolean jj_3_39() {
    if (jj_scan_token(LEQ)) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(AGGSUM)) return true;
    if (jj_3R_21()) return true;
    if (jj_3R_19()) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_38() {
    if (jj_scan_token(GEQ)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(RB)) return true;
    return false;
  }

  private boolean jj_3_37() {
    if (jj_scan_token(NEQ)) return true;
    return false;
  }

  private boolean jj_3_36() {
    if (jj_scan_token(EQL)) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(AGGSUM)) return true;
    if (jj_3R_21()) return true;
    if (jj_3R_17()) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(LB)) return true;
    return false;
  }

  private boolean jj_3R_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_36()) {
    jj_scanpos = xsp;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3_41()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_108() {
    if (jj_3R_31()) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_3R_31()) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_21()) return true;
    if (jj_3R_16()) return true;
    if (jj_3R_31()) return true;
    if (jj_3R_16()) return true;
    if (jj_3R_31()) return true;
    if (jj_3R_16()) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(BOOLTYPE)) return true;
    if (jj_scan_token(LATEJS)) return true;
    if (jj_3R_21()) return true;
    if (jj_3R_43()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_108()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(MAX)) return true;
    if (jj_3R_21()) return true;
    if (jj_3R_19()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_28()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(AGGCONCATFSPS)) return true;
    if (jj_3R_21()) return true;
    if (jj_3R_43()) return true;
    if (jj_3R_31()) return true;
    if (jj_3R_18()) return true;
    if (jj_3R_31()) return true;
    if (jj_3R_17()) return true;
    if (jj_3R_31()) return true;
    if (jj_3R_71()) return true;
    if (jj_3R_31()) return true;
    if (jj_3R_16()) return true;
    if (jj_3R_31()) return true;
    if (jj_3R_33()) return true;
    if (jj_3R_31()) return true;
    if (jj_3R_33()) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_107() {
    if (jj_3R_31()) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_3R_31()) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(BOOLTYPE)) return true;
    if (jj_scan_token(JS)) return true;
    if (jj_3R_21()) return true;
    if (jj_3R_43()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_107()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(AGGCONCATWSEXT)) return true;
    if (jj_3R_21()) return true;
    if (jj_3R_18()) return true;
    if (jj_3R_31()) return true;
    if (jj_3R_18()) return true;
    if (jj_3R_31()) return true;
    if (jj_3R_16()) return true;
    if (jj_3R_31()) return true;
    if (jj_3R_17()) return true;
    if (jj_3R_31()) return true;
    if (jj_3R_17()) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(MAX)) return true;
    if (jj_3R_21()) return true;
    if (jj_3R_17()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_27()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(AGGCONCATWS)) return true;
    if (jj_3R_21()) return true;
    if (jj_3R_18()) return true;
    if (jj_3R_31()) return true;
    if (jj_3R_18()) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(BOOL)) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_3R_31()) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_106() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(AGGCONCAT)) return true;
    if (jj_3R_21()) return true;
    if (jj_3R_18()) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(MAX)) return true;
    if (jj_3R_21()) return true;
    if (jj_3R_19()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_26()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_105() {
    if (jj_scan_token(BOOLTYPE)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_104() {
    if (jj_3R_18()) return true;
    if (jj_3R_70()) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_28()) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_103() {
    if (jj_3R_17()) return true;
    if (jj_3R_69()) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_102() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3_101() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_3R_31()) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_100() {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_100()) {
    jj_scanpos = xsp;
    if (jj_3_101()) {
    jj_scanpos = xsp;
    if (jj_3_102()) {
    jj_scanpos = xsp;
    if (jj_3_103()) {
    jj_scanpos = xsp;
    if (jj_3_104()) {
    jj_scanpos = xsp;
    if (jj_3_105()) {
    jj_scanpos = xsp;
    if (jj_3_106()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_25() {
    if (jj_3R_31()) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_25()) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(CONCATWS)) return true;
    if (jj_3R_21()) return true;
    if (jj_3R_18()) return true;
    if (jj_3R_31()) return true;
    if (jj_3R_18()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_35()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(MAX)) return true;
    if (jj_3R_21()) return true;
    if (jj_3R_17()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_25()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_99() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_23()) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_3R_21()) return true;
    if (jj_3R_16()) return true;
    if (jj_3R_22()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_98() {
    if (jj_scan_token(INTTYPE)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_3R_30()) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_34() {
    if (jj_3R_31()) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_97() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_3R_29()) return true;
    if (jj_3R_28()) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_96() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3_95() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3_94() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_93() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3_92() {
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3_91() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3_90() {
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3_89() {
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3_88() {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(CONCAT)) return true;
    if (jj_3R_21()) return true;
    if (jj_3R_18()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_34()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_87() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_21()) return true;
    if (jj_3R_17()) return true;
    if (jj_3R_22()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_86() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_27()) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_85() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_85()) {
    jj_scanpos = xsp;
    if (jj_3_86()) {
    jj_scanpos = xsp;
    if (jj_3_87()) {
    jj_scanpos = xsp;
    if (jj_3_88()) {
    jj_scanpos = xsp;
    if (jj_3_89()) {
    jj_scanpos = xsp;
    if (jj_3_90()) {
    jj_scanpos = xsp;
    if (jj_3_91()) {
    jj_scanpos = xsp;
    if (jj_3_92()) {
    jj_scanpos = xsp;
    if (jj_3_93()) {
    jj_scanpos = xsp;
    if (jj_3_94()) {
    jj_scanpos = xsp;
    if (jj_3_95()) {
    jj_scanpos = xsp;
    if (jj_3_96()) {
    jj_scanpos = xsp;
    if (jj_3_97()) {
    jj_scanpos = xsp;
    if (jj_3_98()) {
    jj_scanpos = xsp;
    if (jj_3_99()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_26()) return true;
    if (jj_3R_25()) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_21()) return true;
    if (jj_3R_19()) return true;
    if (jj_3R_22()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_84() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(STRLEN)) return true;
    if (jj_3R_21()) return true;
    if (jj_3R_18()) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_24()) return true;
    if (jj_3R_23()) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_83() {
    if (jj_scan_token(FLOATTYPE)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_82() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3_81() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_21()) return true;
    if (jj_3R_18()) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_80() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_79() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_21()) return true;
    if (jj_3R_16()) return true;
    if (jj_3R_31()) return true;
    if (jj_3R_18()) return true;
    if (jj_3R_31()) return true;
    if (jj_3R_18()) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_78() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3_77() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) return true;
    }
    return false;
  }

  private boolean jj_3_76() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3_75() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3_74() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_74()) {
    jj_scanpos = xsp;
    if (jj_3_75()) {
    jj_scanpos = xsp;
    if (jj_3_76()) {
    jj_scanpos = xsp;
    if (jj_3_77()) {
    jj_scanpos = xsp;
    if (jj_3_78()) {
    jj_scanpos = xsp;
    if (jj_3_79()) {
    jj_scanpos = xsp;
    if (jj_3_80()) {
    jj_scanpos = xsp;
    if (jj_3_81()) {
    jj_scanpos = xsp;
    if (jj_3_82()) {
    jj_scanpos = xsp;
    if (jj_3_83()) {
    jj_scanpos = xsp;
    if (jj_3_84()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_21()) return true;
    if (jj_3R_16()) return true;
    if (jj_3R_31()) return true;
    if (jj_3R_19()) return true;
    if (jj_3R_31()) return true;
    if (jj_3R_19()) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(ASSIGNMENT)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(ASSIGNMENT)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_3R_31()) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3_73() {
    if (jj_3R_31()) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(STEP)) return true;
    if (jj_3R_21()) return true;
    if (jj_3R_17()) return true;
    if (jj_3R_31()) return true;
    if (jj_3R_33()) return true;
    if (jj_3R_31()) return true;
    if (jj_3R_33()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_33()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(ASSIGNMENT)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(STRINGTYPE)) return true;
    if (jj_scan_token(LATEJS)) return true;
    if (jj_3R_21()) return true;
    if (jj_3R_43()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_73()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(ASSIGNMENT)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_21()) return true;
    if (jj_3R_16()) return true;
    if (jj_3R_31()) return true;
    if (jj_3R_17()) return true;
    if (jj_3R_31()) return true;
    if (jj_3R_17()) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_72() {
    if (jj_3R_31()) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_3R_31()) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(STRINGTYPE)) return true;
    if (jj_scan_token(JS)) return true;
    if (jj_3R_21()) return true;
    if (jj_3R_43()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_72()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(FLOATTYPE)) return true;
    if (jj_scan_token(LATEJS)) return true;
    if (jj_3R_21()) return true;
    if (jj_3R_43()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_32()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_19()) return true;
    if (jj_scan_token(0)) return true;
    return false;
  }

  private boolean jj_3_71() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_3R_31()) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3_70() {
    if (jj_scan_token(STRINGTYPE)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_69() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_68() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3_67() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(0)) return true;
    return false;
  }

  private boolean jj_3_66() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_65() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(FLOATTYPE)) return true;
    if (jj_scan_token(JS)) return true;
    if (jj_3R_21()) return true;
    if (jj_3R_43()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_31()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_64() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3_63() {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3_62() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_61() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_61()) {
    jj_scanpos = xsp;
    if (jj_3_62()) {
    jj_scanpos = xsp;
    if (jj_3_63()) {
    jj_scanpos = xsp;
    if (jj_3_64()) {
    jj_scanpos = xsp;
    if (jj_3_65()) {
    jj_scanpos = xsp;
    if (jj_3_66()) {
    jj_scanpos = xsp;
    if (jj_3_67()) {
    jj_scanpos = xsp;
    if (jj_3_68()) {
    jj_scanpos = xsp;
    if (jj_3_69()) {
    jj_scanpos = xsp;
    if (jj_3_70()) {
    jj_scanpos = xsp;
    if (jj_3_71()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  /** Generated Token Manager. */
  public ExpressionParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[108];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ExpressionParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ExpressionParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ExpressionParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ExpressionParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ExpressionParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ExpressionParser(ExpressionParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ExpressionParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[64];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 64; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 108; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
            case 70: jj_3_71(); break;
            case 71: jj_3_72(); break;
            case 72: jj_3_73(); break;
            case 73: jj_3_74(); break;
            case 74: jj_3_75(); break;
            case 75: jj_3_76(); break;
            case 76: jj_3_77(); break;
            case 77: jj_3_78(); break;
            case 78: jj_3_79(); break;
            case 79: jj_3_80(); break;
            case 80: jj_3_81(); break;
            case 81: jj_3_82(); break;
            case 82: jj_3_83(); break;
            case 83: jj_3_84(); break;
            case 84: jj_3_85(); break;
            case 85: jj_3_86(); break;
            case 86: jj_3_87(); break;
            case 87: jj_3_88(); break;
            case 88: jj_3_89(); break;
            case 89: jj_3_90(); break;
            case 90: jj_3_91(); break;
            case 91: jj_3_92(); break;
            case 92: jj_3_93(); break;
            case 93: jj_3_94(); break;
            case 94: jj_3_95(); break;
            case 95: jj_3_96(); break;
            case 96: jj_3_97(); break;
            case 97: jj_3_98(); break;
            case 98: jj_3_99(); break;
            case 99: jj_3_100(); break;
            case 100: jj_3_101(); break;
            case 101: jj_3_102(); break;
            case 102: jj_3_103(); break;
            case 103: jj_3_104(); break;
            case 104: jj_3_105(); break;
            case 105: jj_3_106(); break;
            case 106: jj_3_107(); break;
            case 107: jj_3_108(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
