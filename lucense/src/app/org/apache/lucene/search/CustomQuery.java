package org.apache.lucene.search;

/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.io.IOException;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

import org.apache.lucene.index.IndexReader;
import org.apache.lucene.index.Term;

/**
 * The abstract base class for queries.
 * <p>
 * Instantiable subclasses are:
 * <ul>
 * <li> {@link TermQuery}
 * <li> {@link MultiTermQuery}
 * <li> {@link BooleanQuery}
 * <li> {@link WildcardQuery}
 * <li> {@link PhraseQuery}
 * <li> {@link PrefixQuery}
 * <li> {@link MultiPhraseQuery}
 * <li> {@link FuzzyQuery}
 * <li> {@link TermRangeQuery}
 * <li> {@link NumericRangeQuery}
 * <li> {@link org.apache.lucene.search.spans.SpanQuery}
 * </ul>
 * <p>
 * A parser for queries is contained in:
 * <ul>
 * <li>{@link org.apache.lucene.queryParser.QueryParser QueryParser}
 * </ul>
 */
public abstract class CustomQuery extends Query {
  private float boost = 1.0f; // query boost factor

  /**
   * Sets the boost for this query clause to <code>b</code>. Documents matching
   * this clause will (in addition to the normal weightings) have their score
   * multiplied by <code>b</code>.
   */
  @Override
  public void setBoost(float b) {
    this.boost = b;
  }

  /**
   * Gets the boost for this clause. Documents matching this clause will (in
   * addition to the normal weightings) have their score multiplied by
   * <code>b</code>. The boost is 1.0 by default.
   */
  @Override
  public float getBoost() {
    return this.boost;
  }

  /**
   * Expert: called when re-writing queries under MultiSearcher.
   * 
   * Create a single query suitable for use by all subsearchers (in 1-1
   * correspondence with queries). This is an optimization of the OR of all
   * queries. We handle the common optimization cases of equal queries and
   * overlapping clauses of boolean OR queries (as generated by
   * MultiTermQuery.rewrite()). Be careful overriding this method as queries[0]
   * determines which method will be called and is not necessarily of the same
   * type as the other queries.
   */
  @Override
  public Query combine(Query[] queries) {
    HashSet<Query> uniques = new HashSet<Query>();
    for (int i = 0; i < queries.length; i++) {
      Query query = queries[i];
      BooleanClause[] clauses = null;
      // check if we can split the query into clauses
      boolean splittable = (query instanceof CustomBooleanQuery);
      if (splittable) {
        CustomBooleanQuery bq = (CustomBooleanQuery) query;
        splittable = bq.isCoordDisabled();
        clauses = bq.getClauses();
        for (int j = 0; splittable && (j < clauses.length); j++) {
          splittable = (clauses[j].getOccur() == BooleanClause.Occur.SHOULD);
        }
      }
      if (splittable) {
        for (int j = 0; j < clauses.length; j++) {
          uniques.add(clauses[j].getQuery());
        }
      } else {
        uniques.add(query);
      }
    }
    // optimization: if we have just one query, just return it
    if (uniques.size() == 1) {
      return uniques.iterator().next();
    }
    Iterator<Query> it = uniques.iterator();
    CustomBooleanQuery result = new CustomBooleanQuery(true);
    while (it.hasNext())
      result.add(it.next(), BooleanClause.Occur.SHOULD);
    return result;
  }

}
