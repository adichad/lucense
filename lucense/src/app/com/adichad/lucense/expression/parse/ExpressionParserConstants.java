/* Generated By:JavaCC: Do not edit this line. ExpressionParserConstants.java */
package com.adichad.lucense.expression.parse;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ExpressionParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int INTTYPE = 5;
  /** RegularExpression Id. */
  int FLOATTYPE = 6;
  /** RegularExpression Id. */
  int BOOLTYPE = 7;
  /** RegularExpression Id. */
  int DOUBLETYPE = 8;
  /** RegularExpression Id. */
  int STRINGTYPE = 9;
  /** RegularExpression Id. */
  int IF = 10;
  /** RegularExpression Id. */
  int MAX = 11;
  /** RegularExpression Id. */
  int MIN = 12;
  /** RegularExpression Id. */
  int AVG = 13;
  /** RegularExpression Id. */
  int SQRT = 14;
  /** RegularExpression Id. */
  int POW = 15;
  /** RegularExpression Id. */
  int JS = 16;
  /** RegularExpression Id. */
  int LATEJS = 17;
  /** RegularExpression Id. */
  int AGGSUM = 18;
  /** RegularExpression Id. */
  int AGGPROD = 19;
  /** RegularExpression Id. */
  int AGGMAX = 20;
  /** RegularExpression Id. */
  int AGGMIN = 21;
  /** RegularExpression Id. */
  int AGGBITAND = 22;
  /** RegularExpression Id. */
  int AGGBITOR = 23;
  /** RegularExpression Id. */
  int STRLEN = 24;
  /** RegularExpression Id. */
  int CONCAT = 25;
  /** RegularExpression Id. */
  int CONCATWS = 26;
  /** RegularExpression Id. */
  int AGGCONCAT = 27;
  /** RegularExpression Id. */
  int AGGCONCATWS = 28;
  /** RegularExpression Id. */
  int AGGCONCATWSEXT = 29;
  /** RegularExpression Id. */
  int AGGCONCATFSPS = 30;
  /** RegularExpression Id. */
  int AUXFILTER = 31;
  /** RegularExpression Id. */
  int EQL = 32;
  /** RegularExpression Id. */
  int GEQ = 33;
  /** RegularExpression Id. */
  int LEQ = 34;
  /** RegularExpression Id. */
  int GRE = 35;
  /** RegularExpression Id. */
  int LES = 36;
  /** RegularExpression Id. */
  int NEQ = 37;
  /** RegularExpression Id. */
  int AND = 38;
  /** RegularExpression Id. */
  int OR = 39;
  /** RegularExpression Id. */
  int NOT = 40;
  /** RegularExpression Id. */
  int PLUS = 41;
  /** RegularExpression Id. */
  int SUB = 42;
  /** RegularExpression Id. */
  int MUL = 43;
  /** RegularExpression Id. */
  int DIV = 44;
  /** RegularExpression Id. */
  int MOD = 45;
  /** RegularExpression Id. */
  int BITXOR = 46;
  /** RegularExpression Id. */
  int BITAND = 47;
  /** RegularExpression Id. */
  int BITOR = 48;
  /** RegularExpression Id. */
  int BITNOT = 49;
  /** RegularExpression Id. */
  int SIGNEDSHIFTLEFT = 50;
  /** RegularExpression Id. */
  int SIGNEDSHIFTRIGHT = 51;
  /** RegularExpression Id. */
  int UNSIGNEDSHIFTRIGHT = 52;
  /** RegularExpression Id. */
  int LB = 53;
  /** RegularExpression Id. */
  int RB = 54;
  /** RegularExpression Id. */
  int COM = 55;
  /** RegularExpression Id. */
  int ASSIGNMENT = 56;
  /** RegularExpression Id. */
  int INT = 57;
  /** RegularExpression Id. */
  int FLOAT = 58;
  /** RegularExpression Id. */
  int BOOL = 59;
  /** RegularExpression Id. */
  int DOUBLE = 60;
  /** RegularExpression Id. */
  int STRING = 61;
  /** RegularExpression Id. */
  int QUOTE = 62;
  /** RegularExpression Id. */
  int ID = 63;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"\\r\"",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"[int]\"",
    "\"[float]\"",
    "\"[bool]\"",
    "\"[double]\"",
    "\"[string]\"",
    "\"if\"",
    "\"max\"",
    "\"min\"",
    "\"avg\"",
    "\"sqrt\"",
    "\"pow\"",
    "\"js\"",
    "\"lazyjs\"",
    "\"sum\"",
    "\"prod\"",
    "\"aggmax\"",
    "\"aggmin\"",
    "\"aggbitand\"",
    "\"aggbitor\"",
    "\"strlen\"",
    "\"strcat\"",
    "\"strcatws\"",
    "\"aggstrcat\"",
    "\"aggstrcatws\"",
    "\"aggstrcatwsext\"",
    "\"aggstrcatfsps\"",
    "\"auxfilter\"",
    "\"==\"",
    "\">=\"",
    "\"<=\"",
    "\">\"",
    "\"<\"",
    "\"!=\"",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"^\"",
    "\"&\"",
    "\"|\"",
    "\"~\"",
    "\"<<\"",
    "\">>\"",
    "\">>>\"",
    "\"(\"",
    "\")\"",
    "\",\"",
    "\"=\"",
    "<INT>",
    "<FLOAT>",
    "<BOOL>",
    "<DOUBLE>",
    "<STRING>",
    "\"\\\'\"",
    "<ID>",
  };

}
